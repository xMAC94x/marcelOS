-- marcelOS Monitor functions
boot.BootMsg("starting mView")
TMonitorBlock = classapi.class(nil,"TMonitorBlock") 
TMonitor = classapi.class(nil,"TMonitor") 
TScreen = classapi.class(nil,"TScreen") 
local config = ehtf.THTNode()

Tvwindow = classapi.class(nil,"Tvwindow") -- Includes a virtual Window for dubble buffered read write...
main = nil
second = nil


function Tvwindow:__init()
	self.width = 0
	self.height = 0
	self.CursorX = 1
	self.CursorY = 1
	self.FontColor = colors.white
	self.BackColor = colors.black
	self.lines = {}
end

function Tvwindow:clear()
local i = 0
local atext = string.rep(" ",self.width)
for i =1,self.height do
	self.lines[i] = {{1,atext,colors.white,colors.black}}
	end
self.CursorX = 1
self.CursorY = 1
end

function Tvwindow:clearLine()
local atext = string.rep(" ",self.width)
self.lines[self.CursorY] = {{1,atext,colors.white,colors.black}}
self.CursorX = 1
end


function Tvwindow:SetSize(x,y)
local atext = ""
local i = 0
if x > 0 then
	atext = string.rep(" ",x)
	for i =self.height+1,y do
		self.lines[i] = {{1,atext,colors.white,colors.black}}
		end
	end
-- ERROR  HERE, it's not getting smaler, only bigger !!! no deletion here
self.width = x
self.height = y
end

function Tvwindow:valid(x,y)
return (y > 0) and (y <= self.height) and (x > 0) and (x <= self.width)
end

function Tvwindow:ClearChars( acount )
if acount > 0 then
	local text = string.rep(" ",acount)
	self.CursorX = self.CursorX - acount
	self:writePos(self.CursorX,self.CursorY,text)
	end
end

function Tvwindow:write( text)
self:writePos(self.CursorX,self.CursorY,text , self.FontColor , self.BackColor )
self.CursorX = self.CursorX + string.len(text)
end

function Tvwindow:print( text )
self:writePos(self.CursorX,self.CursorY,text , self.FontColor , self.BackColor  )
self.CursorX = 1
self.CursorY = self.CursorY + 1
end

function Tvwindow:findLine(x, y)
-- returns the current line index of x,y  .   
local curpos = 0
local maxpos = 0
local i = 0
for i = 1,#self.lines[y] do
	curpos = self.lines[y][i][1]
	if i < #self.lines[y] then
		maxpos = self.lines[y][i+1][1]-1
		else
		maxpos = self.width
		end
	if (x >= curpos) and (x <= maxpos) then
		return i, curpos , maxpos
		end
	end
if (x > self.width) or (x < 1) then
	return -1 -- doesn't belong in here
	end
return 1
end

function Tvwindow:writePos(x, y ,text , color , bgcolor )
if (y < 1) or (y > #self.lines) then 
	return
	end
text = tostring(text)  or ""
color = color or colors.white
bgcolor = bgcolor or colors.black
if (x < 1) then
	text = string.sub(text,2-x)
	x = 1
	end
local i,i2,i3 = 0,0,0
local curpos = 0
local maxpos = 0
local offset = 0
local diff = 0
local length = string.len(text)
local lastchar = 0 -- last char of current thingy if i just add the text

i, curpos, maxpos = self:findLine(x,y)
if (i > 0) and curpos then
	-- It fit's in, test colors !
	if (self.lines[y][i][3] == color) and (self.lines[y][i][4] == bgcolor) then
		-- ok
		offset = x-curpos+1
		lastchar = offset+length-1
		-- Adding
		if lastchar >= maxpos then
			if offset > 1 then
				self.lines[y][i][2] = string.sub(self.lines[y][i][2],1,offset-1) .. text
				else
				self.lines[y][i][2] = text
				end
			else
			if offset > 1 then
				self.lines[y][i][2] = string.sub(self.lines[y][i][2],1,offset-1) .. text .. string.sub(self.lines[y][i][2],lastchar+1,maxpos)
				else
				self.lines[y][i][2] = text .. string.sub(self.lines[y][i][2],lastchar+1,maxpos)
				end
			end
		-- Checking next
		if lastchar > maxpos then
			-- recursiv !!
			
			else
			-- no problems, maybe i can merge 2 together ;)

			end
		else
		-- not ok !!
		local new = {x,text,color , bgcolor}
		self.lines[y][#self.lines[y]+1] = new  --test -- error --deactivate
		end

	end
	

	
	--[[
local astr = (self.lines[y] or "")
local i = 0
for i = 1,#self.lines[y] do
	if self.lines[y][i][1] == x
	end
self.lines[y] = string.sub(astr,1,x-1) .. text .. string.sub(astr,x+string.len(text))
if color and bgcolor then
	if not self.colors[y] then 
		self.colors[y] = {}
		end
	if not self.bcolors[y] then 
		self.bcolors[y] = {}
		end
	for i = x,x+string.len(text)-1 do
		self.colors[y][i] = color
		self.bcolors[y][i] = bgcolor
		end	
elseif color then
	if not self.colors[y] then 
		self.colors[y] = {}
		end
	for i = x,x+string.len(text)-1 do
		self.colors[y][i] = color
		end	
elseif bgcolor then
	if not self.bcolors[y] then 
		self.bcolors[y] = {}
		end
	for i = x,x+string.len(text)-1 do
		self.bcolors[y][i] = bgcolor
		end	
	end
--]]
end

--[[

function Tvwindow:__init()
	self.width = 0
	self.height = 0
	self.CursorX = 1
	self.CursorY = 1
	self.FontColor = colors.white
	self.BackColor = colors.black
	self.lines = {}
	self.colors = {}
	self.bcolors = {}
end

function Tvwindow:clear()
local i = 0
local i2 = 0
local atext = string.rep(" ",self.width)
for i =1,self.height do
	self.lines[i] = atext
	self.colors[i] = {}
	self.bcolors[i] = {}
	for i2=1,self.width do
		self.colors[i][i2] = colors.white
		self.bcolors[i][i2] = colors.black
		end
	end
self.CursorX = 1
self.CursorY = 1
end

function Tvwindow:clearLine()
local atext = string.rep(" ",self.width)
local i = 1
self.lines[self.CursorY] = atext
self.colors[self.CursorY] = {}
self.bcolors[self.CursorY] = {}
for i=1,self.width do
	self.colors[self.CursorY][i] = colors.white
	self.bcolors[self.CursorY][i] = colors.black
	end
self.CursorX = 1
end


function Tvwindow:SetSize(x,y)
local atext = ""
local i,i2 = 0,0
if (x - self.width) > 1 then
	atext = string.rep(" ",x - self.width)
	for i =1,self.height do
		self.lines[i] = self.lines[i] .. atext
		for i2=self.width+1,x do
			self.colors[i][i2] = colors.white
			self.bcolors[i][i2] = colors.black
			end
		end
	end
if x > 0 then
	atext = string.rep(" ",x)
	for i =self.height+1,y do
		self.lines[i] = atext
		self.colors[i] = {}
		self.bcolors[i] = {}
		for i2=1,x do
			self.colors[i][i2] = colors.white
			self.bcolors[i][i2] = colors.black
			end
		end
	end
self.width = x
self.height = y
end

function Tvwindow:valid(x,y)
return (y > 0) and (y <= self.height) and (x > 0) and (x <= self.width)
end

function Tvwindow:ClearChars( acount )
if acount > 0 then
	local text = string.rep(" ",acount)
	self.CursorX = self.CursorX - acount
	self:writePos(self.CursorX,self.CursorY,text)
	end
end

function Tvwindow:write( text)
self:writePos(self.CursorX,self.CursorY,text , self.FontColor , self.BackColor )
self.CursorX = self.CursorX + string.len(text)
end

function Tvwindow:print( text )
self:writePos(self.CursorX,self.CursorY,text , self.FontColor , self.BackColor  )
self.CursorX = 1
self.CursorY = self.CursorY + 1
end

function Tvwindow:writePos(x, y ,text , color , bgcolor )
text = tostring(text or "")
if (x < 1) then
	text = string.sub(text,2-x)
	x = 1
	end
local astr = (self.lines[y] or "")
local i = 0
self.lines[y] = string.sub(astr,1,x-1) .. text .. string.sub(astr,x+string.len(text))
if color and bgcolor then
	if not self.colors[y] then 
		self.colors[y] = {}
		end
	if not self.bcolors[y] then 
		self.bcolors[y] = {}
		end
	for i = x,x+string.len(text)-1 do
		self.colors[y][i] = color
		self.bcolors[y][i] = bgcolor
		end	
elseif color then
	if not self.colors[y] then 
		self.colors[y] = {}
		end
	for i = x,x+string.len(text)-1 do
		self.colors[y][i] = color
		end	
elseif bgcolor then
	if not self.bcolors[y] then 
		self.bcolors[y] = {}
		end
	for i = x,x+string.len(text)-1 do
		self.bcolors[y][i] = bgcolor
		end	
	end

end
--]]

function Tvwindow:GetLine(y)
if (y > 0) and (y <= self.height) then
	return (self.lines[y] or "")
	else
	return ""
	end
end

function Tvwindow:SetLine(y,text)
if (y > 0) and (y <= self.height) then
	local atext = string.rep(" ",self.width-string.len(text))
	self.lines[y] = text..atext
	return true
	else
	return false
	end
end

-- TERM COMPATIBLE PROCEDURES !!!

function Tvwindow:setBackColor(acolor)
self.BackColor = acolor
end

function Tvwindow:setFontColor(acolor)
self.FontColor = acolor
end

function Tvwindow:setCursorPos(_x,_y)
self.CursorX = _x
self.CursorY = _y
end

function Tvwindow:getCursorPos()
return self.CursorX,self.CursorY
end



function TMonitorBlock:__init(_parent) -- one block of a physical monitor
	self.parent = _parent -- master
	self.lpos = {-1,-1} -- no TBOX because size = 1 -- local !!!
	self.pos = vec3.TBox() -- term pos
	self.border = {false,false,false,false}
end

function TMonitorBlock:Border()
local x,y = 0,0
if self.border[1] then
	x = x + 1
	end
if self.border[2] then
	y = y + 1
	end
if self.border[3] then
	x = x + 1
	end
if self.border[4] then
	y = y + 1
	end
return {x,y}
end

function TMonitorBlock:GenerateSize()
local xc,yc = 16,16 -- 16 / 16 of the block are mon
local t = self:Border()
xc = xc - 2.5 * t[1]
yc = yc - 2.5 * t[2]
--local xfak = 31/(3*16)  / self.parent.textScale
--local yfak = 7/16       / self.parent.textScale
--local xfak = 0.66203703703703703703703703703704 / self.parent.textScale
--local yfak = 0.44166666666666666666666666666667 / self.parent.textScale
local xfak = 143/(107*2*self.parent.textScale)
local yfak = 53/(59*2*self.parent.textScale)
--x2 =  math.floor((16*monitors-4)/.759)

local x,y = 1,1
if self.parent.m ~= mperipheral.TermPeripheral then
	x = xfak*xc
	y = yfak*yc	
	else
	x,y = self.parent.m.p.getSize()
	end

return {x,y}
end

function TMonitor:__init(_name , _m , _parent) -- one block of a physical monitor
	self.name = _name
	self.parent = _parent
	self.textScale = 0.5
	self.m = _m -- Mperipheral
	self.ppos = vec3.TBox() -- Physical POS
	self.lpos = vec3.TBox() -- Physical POS where the TOTAL monitor is at 1 | 1
	self.pos = vec3.TBox() -- term pos
	self.gpos = vec3.TBox() -- global POS !!!
	self.blocks = {}
	if _m then 
		if _m ~= mperipheral.TermPeripheral then
			_m.p.setTextScale(self.textScale) 
			end
		end
end

function TMonitor:Change() -- one block of a physical monitor
	-- On physical Change to one Monitor !

	-- Override if Conf is posible 
	local done = self:LoadfromConfig()
	if self.m ~= mperipheral.TermPeripheral then 
		self.m.p.setTextScale(self.textScale) 
		end
	local x2,y2 = self.m.p.getSize()
	self.pos:SetPos({1,1,x2,y2})
	if not done then
		local x,y = PhysicSize( x2,y2 , self.textScale)
		self.ppos:SetPos({1,1,x,y})
		local b = WahrscheinlichePos(self,x,y)
		self.m.pos = b
		self.m.size = {x,y,1}
		end
	
	
	-- Create blocks
	local x,y = 1,1
	local _s = self.ppos:Size()
	local tx,ty = 1,1 -- bottomright of the current block !! term 
	--print("Physical Size      " .. tostring(_s[1]) .. "  " .. tostring(_s[2]) )
	local new = nil
	local t = {0,0}
	self.blocks = {}
	for y = 1,_s[2] do
		tx = 1
		self.blocks[y] = {}
		for x = 1,_s[1] do
			new = TMonitorBlock(self)
			new.lpos = {x,y}
			new.border[1] = (x == 1)
			new.border[2] = (y == 1)
			new.border[3] = (x == _s[1])
			new.border[4] = (y == _s[2])
			t = new:GenerateSize()
			new.pos:SetPos({math.floor(tx),math.floor(ty),math.floor(tx + t[1]-1),math.floor(ty + t[2]-1)})
			self.blocks[y][x] = new
			tx = tx + t[1]
			end
		ty = ty + t[2] -- t[2] stays the same :)
		end
--print("Calculated TermSize      " .. tostring(tx-1) .. "  " .. tostring(ty-1))
end

function TMonitor:GetGPos()
local x,y = 1,1
self.gpos:SetPos({10000,10000,-10000,-10000}) --maximal size for MONITOR SETUP !!! 
local x2,y2 = self.lpos[1],self.lpos[2]
local donex,doney = false,false
-- top get x
if self.parent.blocks[y2-1] then
	local obj = self.parent.blocks[y2-1][x2]
	if obj then
		local gx,gy = obj.parent:LocaltoGlobal(obj.pos[1],obj.pos[2])
		x = gx
		donex = true
		end	
	end
-- left get y
local obj = self.parent.blocks[y2][x2-1]
if obj then
	local gx,gy = obj.parent:LocaltoGlobal(obj.pos[1],obj.pos[2])
	y = gy
	doney = true
	end	
-- top left get x,y
if self.parent.blocks[y2-1] then
	local obj = self.parent.blocks[y2-1][x2-1]
	if obj then
		if not donex then
			local gx,gy = obj.parent:LocaltoGlobal(obj.pos[3],obj.pos[4])
			x = gx+1
			donex = true
			end
		if not doney then
			local gx,gy = obj.parent:LocaltoGlobal(obj.pos[3],obj.pos[4])
			y = gy+1
			doney = true
			end
		end	
	end
-- top get y
if self.parent.blocks[y2-1] then
	local obj = self.parent.blocks[y2-1][x2]
	if obj and (not doney) then
		local gx,gy = obj.parent:LocaltoGlobal(obj.pos[3],obj.pos[4])
		y = gy+1
		doney = true
		end	
	end
-- left get x
local obj = self.parent.blocks[y2][x2-1]
if obj and (not donex) then
	local gx,gy = obj.parent:LocaltoGlobal(obj.pos[3],obj.pos[4])
	x = gx+1
	donex = true
	end	
if (x2 == 1) and (y2 == 1) then
	--ok
	donex = true
	doney = true
	end
if (not (donex and doney)) then
	term.setTextColor(colors.red)
	print("HELP i think a monitor is not correct installed... ")
	term.setTextColor(colors.white)
	end
	
local t = self.pos:Size()
self.gpos[1] = x
self.gpos[2] = y
self.gpos[3] = x + t[1] - 1
self.gpos[4] = y + t[2] - 1
end

function TMonitor:BlockatPos(_x,_y) -- one block of a physical monitor
local x,y = 1,1
local _s = self.ppos:Size()
for y = 1,_s[2] do
	for x = 1,_s[1] do
		local obj = self.blocks[y][x] 
		if obj.pos:Inside(_x,_y) then
			return obj, x, y 	
			end
		end
	end
end

function TMonitor:LoadfromConfig()
local p,o,o2 = nil
local astr = tostring(self.m.side)
p = config:FindAboutC("Monitor")
if p then
	p = p:FindAboutC(astr)
	if p then
		-- hey conf is available
		--print("CONFIG AVAILABLE for " .. astr)
		o = p:FindAboutC("ppos")
		if o then
			self.ppos:SetPos({o:SValuesI(1),o:SValuesI(2),o:SValuesI(3),o:SValuesI(4)})
			end
		o = p:FindAboutC("textscale")
		if o then
			self.textScale = o:SValuesI(1)
			end
		return true
		end
	end
return false
end

function TMonitor:LocaltoGlobal(_x,_y)
local x,y = 1,1
x = self.gpos[1] + _x - 1
y = self.gpos[2] + _y - 1 
return x,y
end

function TMonitor:GlobaltoLocal(_x,_y)
local x,y = 1,1
x = _x - self.gpos[1] + 1
y = _y - self.gpos[2] + 1 
return x,y
end


function TScreen:__init(_name)
	self.mon = vec3.TList(2) -- physikal monitors -- higher id means this monitor is in front !!!
	self.name = _name
	self.blocks = {} -- e.g. 4x5 cluster if you have a max size of 4x5 monitors all in all. Saved are pointers to TMonitor
	self.textScale = 0.5
	self.ppos = vec3.TBox() -- physical pos
	self.pos = vec3.TBox() -- term pos
	self.lpos = vec3.TBox() -- Physical POS where the Screen is at 1 | 1
	self.info = {}
	self.needredraw = {} -- die linien die ein Neuzeichnen brauchen !
	self.l = Tvwindow()
	self.l:clear()
end

function TScreen:valid(x,y)
return (y > 0) and (y <= #self.info) and (x > 0) and (x <= #self.info[y])
end

function TScreen:clear()
self.l:clear()
self.needredraw = {}
for i,obj in ipairs(self.mon) do
	if (obj.side) and (obj.m) then obj.m.clear() end
	end
end

function TScreen:SetTextScale(_x)
self.textScale = _x
self:Change()
end

function TScreen:GenerateSize()
-- goes trough all MonitorBlocks and test the size of col / row,
local x,y = 1,1
local mx,my = 1,1
local lmx,lmy = 1,1
local obj = nil
for y = 1,#self.blocks do
	lmx =0
	for x = 1,#self.blocks[y] do
		obj = self.blocks[y][x]
		if obj then
			lmx = lmx + obj.pos[3] - obj.pos[1]+1
			end
		end
	if lmx > mx then 
		mx = lmx
		end
	end
for x = 1,#self.blocks[1] do
	lmy =0
	for y = 1,#self.blocks do
		obj = self.blocks[y][x]
		if obj then
			lmy = lmy + obj.pos[4] - obj.pos[2] +1
			end
		end
	if lmy > my then 
		my = lmy
		end
	end
self.pos:SetPos({1,1,mx,my})
--print("SCREEN SIZE " .. self.pos:InString())
local i,obj = 1,nil
for i,obj in ipairs(self.mon) do
	obj:GetGPos()
	end
return mx,my
end

function PhysicSizeRaw( termWidth, termHeight ,textScale)
if textScale == nil then textScale = 0.5 end
local _x = (termWidth*textScale+5)/20
local _y = ((termHeight*textScale-10)/13.34)+1
return _x , _y
end


function PhysicSize( termWidth, termHeight ,textScale)
local _x,_y = PhysicSizeRaw( termWidth, termHeight ,textScale*2) -- don't ask why ther is a *2. i don't even know either...
return math.floor(_x) , math.floor(_y)
end

function DrawSizeRaw( termWidth, termHeight ,textScale)
if textScale == nil then textScale = 0.5 end
local _x = ((termWidth * 20) - 5) / textScale
local _y = ((13.34 * (termHeight - 1)) + 10) / textScale
return  _x , _y
end


function DrawSize( termWidth, termHeight ,textScale)
local _x,_y = DrawSizeRaw(termWidth, termHeight ,textScale)
if _x < 0 then _x = 0 end
if _y < 0 then _y = 0 end
return  math.floor(_x) , math.floor(_y)
end

function TScreen:CheckTerm()
local need = true
local termid = -1
for i,obj in ipairs(self.mon) do
	if obj.m:conToSide("term") then
		termid = i
		else
		need = false
		end
	end
if need and (termid < 0) then
	-- add
	boot.BootMsg("addTerm")
	local ax,ay = term.getSize() 
	local new = TMonitor("term",mperipheral.TermPeripheral,self)
	new.ppos:Clear()
	new.pos:SetPos({1,1,ax,ay})
	new:Change()
	self.mon:Add(new)
	end
if (termid > -1) and (not need) then
	-- del
	boot.BootMsg("delTerm")
	self.mon:Del(termid)
	end
return need
end

function TScreen:HasPeripheral(_Peripheral)
local i,obj = 0
for i,obj in ipairs(self.mon) do
	if  obj.m == _Peripheral then
		return true , i
		end
	end
return false , -1
end

function TScreen:mPeripheralAdd( _MPeripheral )
if self:HasPeripheral(_MPeripheral) then
	return false
	end
	
local new = TMonitor("",_MPeripheral,self)
new.textScale = self.textScale 
_MPeripheral.p.setTextScale(self.textScale)
-- Fals psize unbekannt !!!	
new:Change()
self.mon:Add(new)
self:CheckTerm()
end

function TScreen:mPeripheralDel( _MPeripheral )
local i,obj = 0
for i,obj in ipairs(self.mon) do
	if  obj.m == _MPeripheral then
		self.mon:Del(i)
		self:CheckTerm()
		return true
		end
	end
end

function TScreen:PreRender()
local t = self.pos:Size()
self.l.width = t[1] 
self.l.height = t[2]
self.l:clear()for y = 1,t[2] do
	self.info[y] = {}
	for x = 1,t[1] do
		self.info[y][x] = {}
		local a,b,c = self:MonAtPos(x,y)
		if a then
			self.info[y][x] = {a.parent,b,c}			
			end
		
		end	
	end
end


function TScreen:Change()
-- CALLED ON PHYSICAL CHANGE !!!!
self.ppos:SetPos({10000,10000,-10000,-10000}) --maximal size for MONITOR SETUP !!! 
-- total size
local i,obj = 0,nil
local i2 = 1
for i,obj in ipairs(self.mon) do
	if obj.ppos[1] < self.ppos[1] then 
		self.ppos[1] = obj.ppos[1]  
		end
	if obj.ppos[2] < self.ppos[2] then 
		self.ppos[2] = obj.ppos[2]  
		end
	if obj.ppos[3] > self.ppos[3] then 
		self.ppos[3] = obj.ppos[3]  
		end
	if obj.ppos[4] > self.ppos[4] then 
		self.ppos[4] = obj.ppos[4]  
		end
	end
	
-- size of the monitors...
for i,obj in ipairs(self.mon) do
	local x1 = obj.ppos[1]-self.ppos[1]+1
	local y1 = obj.ppos[2]-self.ppos[2]+1
	local x2 = obj.ppos[3]-self.ppos[1]+1
	local y2 = obj.ppos[4]-self.ppos[2]+1
	obj.lpos:SetPos({x1,y1,x2,y2})
	end

-- monitor Blocks
local _s = self.ppos:Size()
for y = 1,_s[2] do
	self.blocks[y] = {}
	for x = 1,_s[1] do
		self.blocks[y][x] = self:MonAtPPos(x,y)
		end	
	end
	
-- Display size
self:GenerateSize()
end

function TScreen:MonAtPPos(_px , _py) --physical
local i = #self.mon
for i = #self.mon,1,-1 do
	obj = self.mon[i]
	if obj.lpos:Inside(_px,_py) then
		local lx,ly = 1,1
		lx = _px-obj.lpos[1]+1
		ly = _py-obj.lpos[2]+1
		return obj.blocks[ly][lx]
		end
	end
return nil
end

function TScreen:MonAtPos(_px , _py) -- term
local i = #self.mon
for i = #self.mon,1,-1 do
	obj = self.mon[i]
	if obj.gpos:Inside(_px,_py) then
		local lx,ly = obj:GlobaltoLocal(_px,_py)
		local p = obj:BlockatPos(lx,ly)
		if p then
			return p , lx,ly	
			end
		end
	end
return nil , 0 , 0
end

function TScreen:WritePos(_x, _y ,text , color , bgcolor)
self.l:writePos(_x,_y,text , color , bgcolor)
self.needredraw[_y] = true
end

function TScreen:Flush()
local a,b,c = nil
local la,lx = nil
local atext = " "
local astr = ""
local color,lcolor = nil
local bcolor,lbcolor = nil
local apuf = {}
local p = nil
local obj = nil
local i = 1
for _y = 1,#self.info do
	if self.needredraw[_y] then 
		for i = 1,#self.l.lines[_y] do
			obj = self.l.lines[_y][i]
			_x = obj[1]
			apuf = self.info[_y][_x]
			la = apuf[1]
			b = apuf[2]
			c = apuf[3]
			
			p = la.m.p 
			p.setCursorPos(b,c)
			if p.isColor() then
				p.setBackgroundColor(obj[4])
				p.setTextColor(obj[3])
				end
			p.write(obj[2])
			end
	    --[[
		la = nil
		astr = self.l:GetLine(_y)
		if #self.info[_y] > 0 then
			-- initial
			la = self.info[_y][1][1]
			b = self.info[_y][1][2]
			c = self.info[_y][1][3]
			lcolor = self.l.colors[_y][1]
			lbcolor = self.l.bcolors[_y][1]
			lx = 1
			end
		for _x = 1,#self.info[_y] do
			apuf = self.info[_y][_x]
			a = apuf[1]
			color = self.l.colors[_y][_x]
			bcolor = self.l.bcolors[_y][_x]

			if ((a ~= la) or (lcolor ~= color)  or (lbcolor ~= bcolor)) and (la ~= nil) then
				atext = string.sub(astr,lx,_x-1)
				p = la.m.p 
				p.setCursorPos(b,c) -- ERROR HERE IF MONITOR DEATACHED !!!
				if p.isColor() then
					p.setBackgroundColor(lbcolor)
					p.setTextColor(lcolor)
					end
				p.write(atext)
				la = a
				b = apuf[2]
				c = apuf[3]
				lcolor = color
				lbcolor = bcolor
				lx = _x
				end
			end
		if (la ~= nil) then
			atext = string.sub(astr,lx)
			p = la.m.p 
			p.setCursorPos(b,c)
			if p.isColor() then
				p.setTextColor(lcolor)
				p.setBackgroundColor(lbcolor)
				end
			p.write(atext)
			end
			
		--]]
		self.needredraw[_y] = false
		end
	end
end

function Reset()
--main:detect( driver.driver_sides, _psize)
main:Change()
main:PreRender()
main:clear()
end

function WahrscheinlichePos(mon,sizex,sizey)
if mon.m:conToSide("left") then
	return {-sizex , 0 , 0}
elseif mon.m:conToSide("right") then
	return {1 , 0 , 0}
elseif mon.m:conToSide("top") then
	return {0 , -sizey , 0}
elseif mon.m:conToSide("bottom") then
	return {0 , 1 , 0}
elseif mon.m:conToSide("front") then
	return {0 , 0 , 1}
else
	return {0 , 0 , -1}
	end
end

config:LoadfromFile(path.C(path.DATA(),"/mView/screen"))
main = TScreen("main")
main.textScale = 0.5
second = TScreen("main")
second.textScale = 0.5


function API_Initial()
new = events.CreateEvent("Initialised","mView", "mView")
mTask.RawRaiseEvent(new)
if main:CheckTerm() then
	main:Change()
	main:PreRender()
	main:clear()
	main:Flush()
	end
if second:CheckTerm() then
	second:Change()
	second:PreRender()
	second:clear()
	second:Flush()
	end
end
