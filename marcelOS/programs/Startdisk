--mMultiOS
--<~t<true>marcelOS<info<0||name<0|accManage>version<1|0.1>changePrint<2|false>eventfilter<>EventManager<3|false>Debug<3|true>>code<0|~i<36>print("Hello, i run under marcelOS")>>other<info<0||name<0|accManage>version<2|0.1>>code<0|~i<23>print("Unknown OS ...")>>>
Application.window  =  windows.CreateWindow( Application.name , Application , true) 
Application.window:SetSize(30,23)
Application.window:FindSpace()
local Data = ehtf.THTNode()

local Label1 = winobj.TLabel("Label1",Application.window,Application.window)
Label1.width = 6
Label1.top = 2
Label1.left = 2
Label1.caption = "source"

local Edit1 = winobj.TEdit("Edit1",Application.window,Application.window)
Edit1.width = 15
Edit1.top = 2
Edit1.left = 10
Edit1.border = false
Edit1.text.text = "/"

local Label2 = winobj.TLabel("Label2",Application.window,Application.window)
Label2.width = 6
Label2.top = 4
Label2.left = 2
Label2.caption = "dest"

local Edit2 = winobj.TEdit("Edit2",Application.window,Application.window)
Edit2.width = 15
Edit2.top = 4
Edit2.left = 10
Edit2.border = false
Edit2.text.text = "/compressed.mzip"

local Checkbox1 = winobj.TCheckbox("Checkbox1",Application.window,Application.window)
Checkbox1.width = 15
Checkbox1.top = 6
Checkbox1.left = 10
Checkbox1.border = false
Checkbox1.checked = false
Checkbox1.caption = "Extract"

local Checkbox2 = winobj.TCheckbox("Checkbox2",Application.window,Application.window)
Checkbox2.width = 15
Checkbox2.top = 8
Checkbox2.left = 10
Checkbox2.border = false
Checkbox2.checked = false
Checkbox2.caption = "include /ROM"

local Checkbox3 = winobj.TCheckbox("Checkbox3",Application.window,Application.window)
Checkbox3.width = 15
Checkbox3.top = 10
Checkbox3.left = 10
Checkbox3.border = false
Checkbox3.checked = true
Checkbox3.caption = "All in one Line"

local Checkbox4 = winobj.TCheckbox("Checkbox4",Application.window,Application.window)
Checkbox4.width = 15
Checkbox4.top = 12
Checkbox4.left = 10
Checkbox4.border = false
Checkbox4.checked = false
Checkbox4.caption = "Self extraction"

local Label3 = winobj.TLabel("Label3",Application.window,Application.window)
Label3.width = 6
Label3.top = 13
Label3.left = 2
Label3.visible = false
Label3.caption = "extract"

local Edit3 = winobj.TEdit("Edit3",Application.window,Application.window)
Edit3.width = 15
Edit3.top = 13
Edit3.left = 10
Edit3.border = false
Edit3.visible = false
Edit3.text.text = ""

local Checkbox5 = winobj.TCheckbox("Checkbox5",Application.window,Application.window)
Checkbox5.width = 15
Checkbox5.top = 15
Checkbox5.left = 10
Checkbox5.border = false
Checkbox5.checked = false
Checkbox5.caption = "Install Disk"

local function CheckboxOnChange ()
Label3.visible = Checkbox4.checked
Edit3.visible = Checkbox4.checked
end

Checkbox4.onChange = CheckboxOnChange

Application.window:RegisterEvents(Application) 

local function DoStart()
local conf = ehtf.THTNode()
local mode = ""
local source = Edit1.text.text
local dest = Edit2.text.text
local includerom = Checkbox2.checked
local oneLine = Checkbox3.checked or Checkbox4.checked or Checkbox5.checked
local output = ehtf.THTNode()
local p = nil
local timeout = 200
local acount = 0
local extractpath = Edit3.text.text

if Checkbox1.checked then 
	mode = "extract"
   else 
	mode = "compress"
	end

conf:Add("mode",mode)
conf:Add("source",source)
conf:Add("dest",dest)
conf:Add("includerom",includerom)
conf:Add("oneLine",oneLine)

local co = mTask.CreateTask( "zip" )
co.file = path.C( path.PROGRAMS() , "dll", "mzip" )
co.args:Add(conf)
if Checkbox4.checked or Checkbox5.checked then
	output:Add("string")
	co.args:Add(output)
	end
co:run()

if Checkbox4.checked or Checkbox5.checked then
	
	p = output:FindAboutC("data")
	while not p do
		sleep(1)
		Debug("waiting... ( " .. tostring(acount) .. " | " .. tostring(timeout) .. " )")
		acount = acount + 1
		if acount >= timeout then
			Debug("ERROR mzip timed out")
			return nil
			end
		p = output:FindAboutC("data")
		end

	Debug("create file")
	local template = ehtfutils.FileToString(path.C(path.DATA(),"Startdisk/selfextract_template"))
	if Checkbox5.checked then
		local template2 = ehtfutils.FileToString(path.C(path.DATA(),"Startdisk/install_template"))
		local template3 = ehtfutils.FileToString(path.C(path.DATA(),"Startdisk/installfinished_template"))
		template = template2 .. " local dest = \"/\"  local myData = \"" .. p:SValuesS(1) .. "\"  " .. template .. "  " .. template3
		else
		if extractpath == "" then
			template = "pr" .. "int(\"enter extraction path\") local dest = re" .. "ad()  local myData = \"" .. p:SValuesS(1) .. "\"  " .. template 
			else
			template = "local dest = \"" .. extractpath .. "\"  local myData = \"" .. p:SValuesS(1) .. "\"  " .. template
			end
		end
	ehtfutils.StringToFile(dest,template)	
	--Debug(template)
	end


end

local Button1 = winobj.TButton("Button1",Application.window,Application.window)
Button1.width = 15
Button1.top = 17
Button1.left = 10
Button1.border = true
Button1.checked = true
Button1.caption = "Start"
Button1.onClick = DoStart

local function EventHandle()
local i,obj = 0,nil
for i, obj in ipairs(Application.events) do
	Application.window:Event(obj)
	Application.events[i] = nil
	end
end

while true do
	EventHandle()
	Application.window.l:clear()
	Application.window:Paint()
	mTask.sleepEvent(Application,6)
	end
