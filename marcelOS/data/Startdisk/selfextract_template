--[[ 
APIS needed for Decompressing !!!
- classapi
- path
- ehtfutils
- ehtf
]]

--[[
classapi
]]

--[[
THANKS to Ian
http://www.rtsoft.com/forums/showthread.php?1466-A-cleaner-easier-class-idiom-in-Lua
]]

function class(superclass, name)
    local cls = superclass and superclass() or {}
    cls.__name = name or ""
    cls.__super = superclass
	cls.__index = cls
    return setmetatable(cls, 
	  {
	  __call = function (c, ...)
      local instance = setmetatable({__class = cls}, cls)
      if cls.__init then
         cls.__init(instance, ...)
         end
      return instance
      end
	  }
	)
end

--[[

function class()
    local cls = {}
    cls.__index = cls
    return setmetatable(cls, 
	  {
	  __call = function (c, ...)
      local instance = setmetatable({}, cls)
      if cls.__init then
         cls.__init(instance, ...)
         end
      return instance
      end
	  }
	)
end
]]

function issubclass(class1, class2)
if (type(class1) ~= "table") or (type(class2) ~= "table") then
	return false
	end
while true do
    if class1 == class2 then
        return true
        end
    class2 = class2.__super
    if not class2 then
        break
		end
    end
return false
end

function isinstance(inst, cls)
return (type(inst) == "table") and issubclass(inst.__class, cls)
end



--[[
path
]]

local osPath = "marcelOS"
local apisPath = "apis"
local dataPath = "data"
local autorunPath = "autorun"
local tempPath = "temp"
local userPath = "user"
local userautostartPath = "autostart"
local driverPath = "drivers"
local programsPath = "programs"

function FOLDER(apath)
apath = tostring(apath)
if string.char(string.byte(apath,apath:len())) ~= '/' then
	return apath.."/"
	else
	return apath
	end
end

function ROOT(apath)
apath = tostring(apath)
if string.char(string.byte(apath)) ~= '/' then
	return "/"..apath
	else
	return apath
	end
end

function RPath(astr,bstr)
if astr == "/" then
	return ROOT(bstr)
	else
	return ROOT(fs.combine(astr,bstr))
	end
end

function OS()
return ROOT(osPath)
end

function APIS()
return ROOT(fs.combine(osPath,apisPath))
end

function DATA()
return ROOT(fs.combine(osPath,dataPath))
end

function AUTORUN()
return ROOT(fs.combine(osPath,autorunPath))
end

function USER()
return ROOT(userPath)
end

function DRIVERS()
return ROOT(fs.combine(osPath,driverPath))
end

function TEMP()
return ROOT(fs.combine(osPath,tempPath))
end

function PROGRAMS()
return ROOT(fs.combine(osPath,programsPath))
end

function USERAUTOSTART()
return ROOT(fs.combine(userPath,userautostartPath))
end


--[[
ehtfutils
]]

TEHTFStatus = {"EHTFdone","EHTFdonePart","EHTFerror","EHTFexit","EHTFincorrectString","EHTFnone"}

TVarDec = class(nil,"TVarDec")

function TVarDec:__init()
	self._Begin = "<"
	self._End = ">"
	self._Array = "|"
	self._System = "~"
	end

ToStrPar = {"tsWriteMetaInfo","tsWriteTypecast","tsUseTypecast","tsUseInsert"}
ToStrMode = {["tsWriteMetaInfo"] = true,["tsWriteTypecast"] = true,["tsUseTypecast"] = true,["tsUseInsert"] = true}
stToStrMode =  {["tsWriteMetaInfo"] = false,["tsWriteTypecast"] = true,["tsUseTypecast"] = true,["tsUseInsert"] = true}
stToStrModeAll =  {["tsWriteMetaInfo"] = true,["tsWriteTypecast"] = true,["tsUseTypecast"] = true,["tsUseInsert"] = true}
EHTFversion = "0.9.8"

function stvardec()
return TVarDec()
end

function TVarDec:Assign(vardec)
-- Pflicht da Klasse und kein Record !
self._Begin = vardec._Begin
self._End = vardec._End
self._Array = vardec._Array
self._System = vardec._System
end

function FileToString( apath )
local result = ""
local file = fs.open(apath,"r")
if file then
	result = file.readAll()
	file.close()
	end
return result
end

function StringToFile( apath , astring )
local file = fs.open(apath,"w")
if file then
	file.write(astring)
	file.close()
	end
end

function HTStrtoSVar(astr,typecast)
-- Andere funktion...
local result
if typecast == 0 then
	result = tostring(astr)
	elseif (typecast == 1) or (typecast == 2) then
		result = tonumber(astr)
		elseif typecast == 3 then
			result = toboolean(astr)
			else
			result = astr
			end
return result
end

function GetArt(SVar)
-- NEW FUNCTION
local result = 0
if type(SVar) == "number" then 
	result = 1
	elseif type(SVar) == "string" then
		result = 0
		elseif type(SVar) == "boolean" then
			result = 3
			else
			result = -1
			end
return result
end

function toboolean(avalue)
if type(avalue) == "number" then
	return (avalue == -1)
	elseif type(avalue) == "string" then
		return (string.lower(avalue) == "true")
		elseif type(avalue) == "boolean" then
			return avalue
			else
			return (avalue ~= nil)
			end
end

function HTVardectoStr(newvardec, oldvardec)
local result = oldvardec._System .. oldvardec._Begin.. "v"  .. oldvardec._Begin .. EHTFversion .. oldvardec._End
       .. "_b"   .. oldvardec._Begin .. string.byte(newvardec._Begin)   .. oldvardec._End
       .. "_e"     .. oldvardec._Begin .. string.byte(newvardec._End)     .. oldvardec._End
       .. "_a"   .. oldvardec._Begin .. string.byte(newvardec._Array)   .. oldvardec._End
       .. "_s"  .. oldvardec._Begin .. string.byte(newvardec._System)  .. oldvardec._End
       .. oldvardec._End
return result
end

--[[
EHTF
]]

--[[
Yeah, this is the Epic EHTF Node system in LUA.
Now easy Save Data of every type in a Simple String !
e.g. if you want to send a huge complex ammount of information over rednet...

I RECOMMENT TO TURN tsUseInsert ALWAYS OFF !!! BEACAUSE EITHER ME or LUA is to ****** to find out, that the lenght of a string "hel/lo Wörld" 13 is...

]]

THTNode = class(nil,"THTNode")

function StCutOutFunc(Sender , achar)
local result = ((achar == Sender.vardec._Begin)
		or (achar == Sender.vardec._End) 
		or (achar == Sender.vardec._Array) 
		or (achar == Sender.vardec._System) 
		or (achar == string.char(0)))  
return result
end

function THTNode:__init()
	self.parent = nil
	self.vardec = TVarDec()
	self.nodes = {}
	self.Values = {} -- No Type needed, because lua :) 
	self.about = ""
	self.CutOutfunc = StCutOutFunc
	self.CaseSensitive = false
	end


--[[ 
Missing:


FindAllAbout
FindAllAboutC
FindAllVar
ValidAbout
GetCount
GetItem
SetItem


Die FundAbout(about , p ) funktionen.... kein Out Parameter !
]]

--[[##################]]
--[[       THTNode    ]]
--[[##################]]   

function THTNode:Assign( from )
local i = 0
self.vardec = from.vardec
self.CutOutfunc = from.CutOutfunc
self.CaseSensitive = from.CaseSensitive
self.about = from.about
self.parent = from.parent

self.Values = {}
for i = 1,#from.Values do
	self.Values[i] = from.Values[i]
	end
	
self.nodes = {}
for i = 1,#from.nodes do
	self.nodes[i] = THTNode()
	self.nodes[i]:Assign(from.nodes[i])
	self.nodes[i].parent = self
	end
end


--[[##################]]
--[[  Add functtions  ]]
--[[##################]]   

function THTNode:AddChild()
local result = THTNode()
self.nodes[#self.nodes+1] = result
result.parent = self
result.vardec = self.vardec
result.CutOutfunc = self.CutOutfunc
result.CaseSensitive = self.CaseSensitive
return result
end

function THTNode:AddChildPos( pos )
local result = THTNode()
self:Insert(pos,result)
result.parent = self
result.vardec = self.vardec
result.CutOutfunc = self.CutOutfunc
result.CaseSensitive = self.CaseSensitive
return result
end

function THTNode:Add(aabout , SVar)
local result = nil
local i = 0
if type(aabout) == "table" then
	if isinstance(aabout,THTNode) then
		result = #self.nodes+1
		self.nodes[result] = aabout
		aabout.parent = self
		return result
		end
	end
result = self:AddChild()
result.about = aabout
if type(SVar) == "table" then
	for i = 1,#SVar do
		result:AddValue(SVar[i])
		end
	else
	result:AddValue( SVar )
	end
return result
end

function THTNode:ParentAddBehind()
local result = nil
if self.parent ~= nil then
	local  i = self.parent:FindNode(self)
	if i > 0 then 
		result = self.parent:AddChildPos(i+1)
		end
	end
return result
end

function THTNode:ParentAddBefore()
local result = nil
if self.parent ~= nil then
	local  i = self.parent:FindNode(self)
	if i > 0 then 
		result = self.parent:AddChildPos(i-1)
		end
	end
return result
end

--[[#####################]]
--[[  useful functtions  ]]
--[[#####################]]   

function THTNode:AddValue( SVar )
local result = #self.Values+1
self.Values[result] = SVar
return result
end


function THTNode:UnGroup( aindex )
local i = 0
local result = nil
if type(aindex) ~= "number" then
	result = aindex
	aindex = self:FindNode(aindex)	
	else
	result = self.nodes[aindex]
	end
if (aindex < 1) or (aindex > #self.nodes) then 
	return nil
	end
self.nodes[aindex] = nil
for i = aindex,#self.nodes-1 do
	self.nodes[i] = self.nodes [i+1]
	end
result.parent = nil
return result
end


function THTNode:Delet( aindex )
local i = 0
if type(aindex) ~= "number" then
	aindex = self:FindNode(aindex)	
	end
if (aindex < 1) or (aindex > #self.nodes) then 
	return
	end
self.nodes[aindex] = nil
for i = aindex,#self.nodes-1 do
	self.nodes[i] = self.nodes [i+1]
	end
end

function THTNode:Reduceto( aindex)
if type(aindex) == "number" then 
	self:INTRedureToNumber(aindex)
	else
	self:INTRedureToNode(aindex)
	end
end

-- INTERNAL
function THTNode:INTReducetoNumber( aindex )
local i = 0
for i = #self.nodes,aindex+1,-1 do
	self.nodes[i] = nil
	end
end

function THTNode:INTReducetoNode( anode )
local i = 0
for i = #self.nodes,1,-1 do
	if self.nodes[i] == anode then
		return
		else
		self.nodes[i] = nil
		end
	end
end
-- Public

function THTNode:Insert( aindex, anode)
local i = 0
if aindex > #self.nodes+1 then 
	return
	end
for i = #self.nodes+1,aindex+1,-1 do
	self.nodes[i] = self.nodes[i-1]
	end
self.nodes[aindex] = anode
anode.parent = self
end

function THTNode:Node(x)
local i = 0
local result = self
for i = 1,#x do
	if type(x[i]) == "number" then
		if (x[i] > 0) and (x[i] <= #self.nodes) then
			result = result.nodes[x[i]]
			else
			result = nil
			end
		else
		result = (result.FindAbout(x[i]))
		end
	if result == nil then
		return result
		end
	end
return result
end

--[[###################]]
--[[  Find functtions  ]]
--[[###################]]


function THTNode:FindNode( anode )
local i = 0
local result = -1
for i = 1,#self.nodes do
	if self.nodes[i] == anode then
		result = i
		return result
		end
	end
return result
end

function THTNode:FindAbout( astring )
local i = 0
local result = nil
astring = self:CaseFunc(astring)
for i = 1,#self.nodes do
	if self:CaseFunc(self.nodes[i].about) == astring then
		result = self.nodes[i]
		return result
		end
	result = self.nodes[i]:FindAbout(astring)
	if result then
		return result
		end
	end
return result
end

function THTNode:FindAboutCi( astring )
local i = 1
local result = -1
astring = self:CaseFunc(astring)
for i = 1,#self.nodes do
	if self:CaseFunc(self.nodes[i].about) == astring then
		result = i
		return result
		end
	end
return result
end

function THTNode:FindAboutC( astring )
local i = self:FindAboutCi( astring )
local result = nil
if i > 0 then
	result = self.nodes[i]
	return result
	end
return result
end

function THTNode:FindAboutN( astring )
local i = 0
local result = nil
astring = self:CaseFunc(astring)
for i = #self.nodes,1,-1 do
	if self:CaseFunc(self.nodes[i].about) == astring then
		result = self.nodes[i]
		return result
		end
	result = self.nodes[i]:FindAboutN(astring)
	if result then
		return result
		end
	end
return result
end

function THTNode:FindAboutNC( astring )
local i = self:FindAboutNCi( astring )
local result = nil
if i > 0 then
	result = self.nodes[i]
	end
return result
end

function THTNode:FindAboutNCi( astring )
local i = 1
local result = -1
astring = self:CaseFunc(astring)
for i = #self.nodes,1,-1 do
	if self:CaseFunc(self.nodes[i].about) == astring then
		result = i
		return result 
		end
	end
return result 
end

function THTNode:FindVar( SVar )
local i = 1
local i2 = 1
local result = nil
for i = 1,#self.nodes do
	for i2 = 1,#self.Values do
		if self.Values == SVar then
			result = self.nodes[i]
			return result 
			end
		end
	result = self.nodes[i]:FindVar( SVar )
	if result then 
		return result
		end
	end
return result
end

function THTNode:SetSValues_Check( acardinal ,writemode )   
local i = 0
local result = acardinal > 0
if (acardinal > #self.Values) and (readmode) then
	i = #self.Values+1
	for i = i,acardinal-1 do
		print(i)
		self.Values[i] = ""
		end
	end
return result
end
	
function THTNode:SValues( acardinal , aValue )
local result = (aValue or nil)
local writemode = aValue ~= nil
if self:SetSValues_Check(acardinal, writemode) then 
	if writemode then 
		self.Values[acardinal] = result
		else
		result = self.Values[acardinal]
		end
	else
	result = ""
	end
return result
end

function THTNode:SValuesS( acardinal , aValue )
local result = tostring(aValue or "")
local writemode = (aValue ~= nil)
if self:SetSValues_Check(acardinal, writemode) then 
	if writemode then 
		self.Values[acardinal] = result
		else
		result = tostring(self.Values[acardinal]) or ""
		end
	else
	result = ""
	end
return result
end

function THTNode:SValuesI( acardinal , aValue )
local result = tonumber(aValue or 0)
local writemode = aValue ~= nil
if self:SetSValues_Check(acardinal, writemode) then 
	if writemode then 
		self.Values[acardinal] = result
		else
		result = tonumber(self.Values[acardinal]) or 0
		end
	else
	result = 0
	end
return result
end

function THTNode:SValuesB( acardinal , aValue )
local result = toboolean(aValue or 0)
local writemode = aValue ~= nil
if self:SetSValues_Check(acardinal, writemode) then 
	if writemode then 
		self.Values[acardinal] = result
		else
		result = toboolean(self.Values[acardinal] or 0)
		end
	else
	result = false
	end
return result
end
	
function THTNode:CaseFunc( astr )
local result = ""
if self.CaseSensitive then result = astr
	else result = string.lower(astr) end
return result
end

function THTNode:CutOutChars( astring , IntFunc )
local i = 1
local i2 = 1
local von = 1
local result = ""
local achar = ""
local offen = false

for i = 1,string.len(astring) do
	achar = string.char(string.byte(astring,i))
	if (self.CutOutfunc and self:CutOutfunc(achar)) or ((not self.CutOutfunc) and StCutOutFunc(self,achar)) then -- Irgendwie wird CurOutFunc ned gespeichert... deswegen umgehung :)
		if von < i then
			if offen then 
				result = result .. self.vardec._End
				end
			result = result .. string.sub(astring,von,i-1)
			offen = false
			end
		
		if offen then
			result = result .. self.vardec._Array .. string.byte(achar)
			else
			result = result .. self.vardec._System .. self.vardec._Begin .. string.byte(achar)
			end
			
		offen = true
		von = i +1
		i2 = i2 + 1
		if IntFunc and ((i2 % 10000) == 0) then 
			IntFunc(self)
			end
		end
	end
if offen then 
	result = result .. self.vardec._End
	end
result = result .. string.sub(astring,von)
return result
end

function THTNode:ToStr( mode , IntFunc )
local i = 1
local atext = ""
local result = ""
local lmode = vec3.Copy(mode or stToStrMode)

if IntFunc then 
	IntFunc(self)
	end

if lmode["tsWriteMetaInfo"] then
	result = HTVardectoStr(self.vardec,stvardec())
	end
	
result = result .. self:CutOutChars(self.about , IntFunc  ) .. self.vardec._Begin
if lmode["tsWriteTypecast"] then
	result = result .. self.vardec._System .. "t" .. self.vardec._Begin .. "true" .. self.vardec._End 
	end
if lmode["tsUseTypecast"] and (#self.Values > 0) then
	result = result .. tostring(GetArt(self.Values[1])) .. self.vardec._Array
	end
for i = 1,#self.Values do
	atext = self:SValuesS(i)
	if lmode["tsUseInsert"] and (string.len(atext) > 20) then
		atext = self.vardec._System .. 'i' .. self.vardec._Begin .. tostring(string.len(atext)) .. self.vardec._End .. atext
		else
		atext = self:CutOutChars(atext , IntFunc )
		end
	
	if (i == #self.Values) and (#self.nodes == 0) and (string.len(atext) > 0) then 
		result = result .. atext
		else
		result = result .. atext .. self.vardec._Array
		end
	end
lmode["tsWriteMetaInfo"] = false
lmode["tsWriteTypecast"] = false
for i = 1,#self.nodes do
	result = result .. self.nodes[i]:ToStr(lmode, IntFunc)
	end
result = result .. self.vardec._End	
return result
end

function THTNode:FromStr( astring , vardec ,IntFunc )
local a,b,c = HTStrtoNode(astring, self, vardec ,IntFunc)
self = a
return b,c
end

function THTNode:LoadfromFile( path , vardec )
local b,c = self:FromStr(FileToString(path), vardec)
return b,c
end

function THTNode:SavetoFile( path, mode )
local a = self:ToStr( mode )
StringToFile(path , a)
end


function HTStrtoNode(astring,resultNODE,vardec,IntFunc) -- resultNode - result (TEHTFStatus) - i;
local deep = 0
local sysdeep = 0
local atext = ""
local systext = ""
local charpuffer = ""
local obj = {nil}
local i = 1
local instsys = false
local curtypecast = -1
local typecast = false
local systypecast = false
local syscurtypecast = 0
local sysnode = nil
local newnode = nil
local p,o = nil
local rp = "EHTFnone"
local result = "EHTFerror"
local lastsystemsymbol = -1

function d(b)
if b or (b == nil) then 
	deep = deep + 1
	else
	deep = deep -1
	end
result = (deep > 0)
return result
end

function Insert_Value()
if deep >= 1 then
	if typecast then
		if (#obj[deep].Values == 0) and (curtypecast == -1) then
			curtypecast = tonumber(atext or 0) or 0
			else
			obj[deep]:AddValue(HTStrtoSVar(atext,curtypecast))
			end
		else
		obj[deep]:AddValue(HTStrtoSVar(atext,-1)) -- he should guesses
		end
	atext = ""
	end
end

function InterpretSystemNode(anode)
local result = "EHTFNone"
local i2 = 0
local astrpuffer = string.lower(anode.about)

if (astrpuffer == "") then
	for i2 = 1,#anode.Values do
		atext = atext.. string.char(anode:SValuesI(i2))
		end
	elseif (astrpuffer == "_b") then
		vardec._Begin = string.char(anode:SValuesI(1) or 0)
		elseif (astrpuffer == "_e") then
			vardec._End = string.char(anode:SValuesI(1) or 0)
			elseif (astrpuffer == "_a") then
				vardec._Array = string.char(anode:SValuesI(1) or 0)
				elseif (astrpuffer == "_s") then
					vardec._System = string.char(anode:SValuesI(1) or 0)
					elseif (astrpuffer == "t") then
						typecast = anode:SValuesB(1)
						elseif (astrpuffer == "il") then
							if (anode:SValuesI(1)+anode:SValuesI(2)-1) > string.len(astring) then
								result = "EHTFincorrectString"
								return result
								end
							atext = atext .. string.sub(astring,anode:SValuesI(1),anode:SValuesI(1)+anode:SValuesI(2))
							elseif (astrpuffer == "i") then
								if (i+anode:SValuesI(1)) > string.len(astring) then
									result = "EHTFincorrectString"
									return result
									end
								atext = atext .. string.sub(astring,i+1,i+anode:SValuesI(1))
								i = i + anode:SValuesI(1)
								elseif (astrpuffer == "g") then 
									i = anode:SValuesI(1)
									elseif (astrpuffer == "e") then 
										result = "EHTFexit"
										return result
										end	


for i2 = 1,#anode.nodes do
	InterpretSystemNode(anode.nodes[i2])					
	end
return result
end

if vardec == nil then
	vardec = stvardec()
	end

while i <= string.len(astring) do
	charpuffer = string.char(string.byte(astring,i))
	if charpuffer == vardec._Begin then --[[ BEGIN ]]  
		if not d() then
			result = "EHTFincorrectString"
			return resultNODE , result , i
			end
		newnode = THTNode()
		newnode.vardec = vardec
		obj[deep] = newnode
		if string.len(atext) > 0 then 
			newnode.about = atext
			end
	
		if (lastsystemsymbol > 0) then
			instsys = true --[[ SYSTEM ]]
			end
		
		if instsys and (sysnode == nil) then
			--newnode.about = vardec._System
			newnode.about = string.sub(astring,lastsystemsymbol+1,i-1)
			systypecast = typecast
			syscurtypecast = curtypecast
			typecast = false
			sysnode = newnode
			sysdeep = deep
			--systext = string.sub(atext,1,#atext-1)
			systext = string.sub(atext,1,#atext-(i-lastsystemsymbol)+1)
			else
			if deep > 1 then
				obj[deep-1]:Add(newnode)
				else
				if resultNODE then
					resultNODE:Assign(obj[1]) -- neuer node
					obj[1] = nil
					obj[1] = resultNODE
					else
					resultNODE = obj[1]
					end
				end
			end
		
		curtypecast = -1
		atext = ""
		else
		if charpuffer == vardec._End then --[ END ]]
			if string.len(atext) > 0 then 
				Insert_Value()
				end
			if (not d(false)) and (i ~= string.len(astring)) then
				result = "EHTFdonePart" -- Der node ist offiziel vorbei, hier komtm aber noch was dahinter. evt nen zweiter , andere Node !
				return resultNODE , result , i
				end
			curtypecast = -1
			if IntFunc then
				rp = IntFunc(obj[deep],instsys)
				if rp ~= EHTFnone then
					return rp
					end
				end
			if instsys and (deep < sysdeep) then
				sysdeep = 0
				instsys = false
				atext = atext .. systext -- systext ist das was vot dem systemaufruf da stand
				typecast = systypecast
				curtypecast = syscurtypecast
				rp = InterpretSystemNode(sysnode)
				if rp ~= "EHTFNone" then
					result = rp
					return resultNODE , result , i
					end
				sysnode = nil
				lastsystemsymbol = -1
				end
			else
			if charpuffer == vardec._Array then 
				Insert_Value() --[[ Array ]]
				else
				if charpuffer == vardec._System then
					lastsystemsymbol = i 
					else
					atext = atext .. charpuffer --[[ Normal ]]
					end
				end
			end
		end
	i = i + 1
	end
if deep < 1 then 
	result = "EHTFdone"
	else
	result = "EHTFincorrectString" --  Hier fehlt was. Der String bricht ab bevor alles geschlossen werden kann !
	end
	
return resultNODE , result , i
end



--[[
OWN STUFF !!!!

Auto Eddet
local dest = "/"
local myData = ""
]]

local lastsleep = os.time()

local function aSleepFunc()
if lastsleep + 1 < os.clock() then
		lastsleep = os.clock()
		sleep(0.01)
		end
end

write("read data")
local Data = THTNode()
Data:FromStr(myData,stvardec(),aSleepFunc)
print(" ... done")

local function LoadData(adata,apath)
local i,obj = 1,nil
local p,o,p2,p3 = nil,nil,nil
local ap,bp = ""
local aname = ""
local afile = ""
local filedata = ""
p = adata:FindAboutC("name")
if p then 
	aname = p:SValuesS(1)
	ap = RPath(apath,aname)
	if not fs.exists(ap) then
		print(ap)
		fs.makeDir(ap)
		end
	end
o = adata:FindAboutC("sub")
for i,obj in ipairs(o.nodes) do
	if obj.about == "folder" then
		sleep(0.001)
		LoadData(obj,ap)
		else
		p2 = obj:FindAboutC("name")
		if p2 then
			afile = p2:SValuesS(1)
			bp = RPath(ap,afile)
			p3 = obj:FindAboutC("data")
			if p3 then
				filedata = p3:SValuesS(1)
				sleep(0.001)
				StringToFile(bp,filedata)
				end
			end
		end
	end
end

--Data:LoadfromFile("/Hello.ehtf")

write("extract data")
LoadData(Data:FindAboutC("folder"),dest)
print(" ... done")


