--mMultiOS
--<~t<true>marcelOS<info<0||name<0|explorer>version<1|0.2>changePrint<2|false>eventfilter<0|mouse_click|window_resize|window_fullscreen>EventManager<3|true>>code<0|print("Hello, debugger run under marcelOS")>>other<info<0||name<0|explorer>version<2|0.2>>code<0|~i<23>print("Unknown OS ...")>>>
-- Print Debug Info in this Window instead of term... !
Application.window = windows.CreateWindow( Application.name , Application , true)
Application.window:SetSize(40,20)
Application.window:FindSpace()
local i,obj = 0
local trennX = 15
local offset = 2 
local selected = nil

local Eintrag = {}
local TEintrag_debugger = classapi.class(nil,"TEintrag_debugger")

function TEintrag_debugger:__init(owner , title , msg , color)
	self.owner = owner
	self.title = title or ""
	self.msg = msg or ""
	self.color = color or colors.white
	self.time = os.clock()
	Eintrag[#Eintrag+1] = self
end

local function Show()
local i,obj = 0
local pos = 1+offset
local astr = ""
Application.window.l:clear()
local low = #Eintrag - Application.window.height + 2
if low < 1 then 
	low = 1
	end
for i =  low,#Eintrag do
	obj = Eintrag[i]
	astr = obj.title .. ":   " .. obj.msg
	if obj == selected then
		astr = "-- " .. astr
		end	
	Application.window:writePos(1,pos,astr , obj.color)
	pos = pos + 1
	end
if selected then
	astr = ""
	if selected.owner then
		astr = astr .. selected.owner.name .. "  "
		end
	astr = astr .. tostring(selected.time)
	Application.window:writePos(1,1,astr , colors.red)
	end
Application.window:Paint()
end

function ThrowDebug(owner,title,msg,color)
local new = TEintrag_debugger(owner,tostring(title or ""),tostring(msg or "") ,color)
Show()	
return new
end


local function getEvent(_event)
if (_event.name == "mouse_click") then
	local posy = _event.params[3]
	local cnt = posy-offset
	selected = nil
	if (cnt > 0) and (cnt <= #Eintrag) then
		selected = Eintrag[cnt]
		end
	Show()	
	end
if (_event.name == "window_resize") or (_event.name == "window_fullscreen") then
	Show()
	end
end

local function EventHandle()
local i,obj = 0,nil
for i, obj in ipairs(Application.events) do
	Application.window:Event(obj)
	getEvent(obj)
	Application.events[i] = nil
	end
end

while true do
	EventHandle()
	mTask.sleepEvent(Application,10)
	Show()
	end
